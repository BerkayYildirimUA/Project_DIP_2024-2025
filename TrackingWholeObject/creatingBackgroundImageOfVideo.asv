if  ~exist('processedFrames', 'var')

    [numFrames, frameHeight, frameWidth] = size(frames);

    % Apply adapthisteq to all frames
    processedFrames = arrayfun(@(idx) ...
    adapthisteq(squeeze(frames(idx, :, :)), "Distribution", "exponential"), ...
    1:numFrames, 'UniformOutput', false);

    % Reassemble into a 3D array with the same dimensions as the original
    processedFrames = reshape(cell2mat(processedFrames), frameHeight, frameWidth, numFrames);
    processedFrames = permute(processedFrames, [3, 1, 2]); % Ensure the frame index is the first dimension

end


frameDiffs = squeeze(sum(abs(diff(frames, 1, 1)), [2, 3])); % Sum of pixel differences for each frame

    % Identify frames with sufficient movement
    movingFramesIdx = find(frameDiffs > movementThreshold);
    fprintf('Retained %d out of %d frames based on movement threshold.\n', length(movingFramesIdx), size(frames, 1));

    % If no frames meet the threshold, fallback to all frames
    if isempty(movingFramesIdx)
        warning('No frames exceed the movement threshold. Using all frames.');
        filteredFrames = frames;
    else
        % Select only the moving frames
        filteredFrames = frames(movingFramesIdx, :, :);
    end

    % Calculate the median of the filtered frames
    medianFrame = squeeze(median(filteredFrames, 1));

    % Convert to uint8 for display and saving
    medianImage = uint8(medianFrame);

    % Save the resulting image
    outputFile = 'median_image_filtered.png';
    imwrite(medianImage, outputFile);

    % Display the result
    figure;
    imshow(medianImage);
    title('Median Image of High-Movement Frames');