%% Reading and loading the video data
% This code may be should be changed on the way you get the frames variable
% The frames variable should have a format of Nx1726x2240 with N the amount
% of frames in the video

clear 
close all 
clc

folderPath = 'C:\Users\samee\Desktop\Semester 5 part 2\Digital image processing\Frames\';

frame0 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_0.mat");
frame1 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_1.mat");
frame2 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_2.mat");
frame3 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_3.mat");
frame4 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_4.mat");
frame5 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_5.mat");
frame6 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_6.mat");
frame7 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_7.mat");
frame8 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_8.mat");
frame9 = load(folderPath + "Ballenwerper_sync_380fps_006.npychunk_9.mat");

frames = cat(1, frame0.video_data, frame1.video_data, frame2.video_data, ...
     frame3.video_data, frame4.video_data, frame5.video_data, ...
     frame6.video_data, frame7.video_data, frame8.video_data, ...
     frame9.video_data);

%% tracking the video and getting the theta values 

% frame point accessed using png file
frame_PointB = imread('frame_PointB.png');

% Define Point A as a constant (permanent position)
pointA = [897.6928, 937.0970]; % Fixed coordinates of Point A

% Detect initial keypoints
pointB = detectHarrisFeatures(frame_PointB); % detects corners

% First frame is shown with the reference and tracking point
figure;
firstFrame = squeeze(frames(1, :, :));
imshow(firstFrame);
hold on
plot(pointA(1), pointA(2), "ro", "LineWidth", 3, 'DisplayName', 'Reference');
plot(pointB.Location(1), pointB.Location(2), 'g.', 'LineWidth', 3, 'DisplayName', 'Tracking');
legend show;
hold off

% track the video
[theta, trackedPoints] = track(frames, pointA, pointB.Location);

%% Getting the angular speed and plotting the it and the theta values

% Enter the framerate of the video
fps = 380;

% Generate time vector
timeVid = (0:length(theta)-1) / fps * 1000;

% Compute angular speed (degrees per second)
% Use finite difference method: diff(theta) / diff(time)
omega = [0; diff(theta) * fps]; % Add 0 to align the array size

% Multiplies by the fps to get similar values as in csv file
% I do not know the correlation between this values the framerate of the
% video, maybe just coincidence?

% Plot the last frame and trajectory
figure;
imshow(squeeze(frames(end, :, :))); % Show the last frame
hold on;
plot(trackedPoints(:, 1), trackedPoints(:, 2), 'g-', 'LineWidth', 1.5); % Plot trajectory
plot(pointA(1), pointA(2), 'ro', 'MarkerSize', 10, 'LineWidth', 2); % Mark Point A
plot(trackedPoints(end, 1), trackedPoints(end, 2), 'bo', 'MarkerSize', 10, 'LineWidth', 2)
title('Trajectory of Point B');
legend({'Trajectory', 'Point A', 'Point B'}, 'Location', 'Best');
hold off;

% Plot angle theta vs time
figure;
subplot(2, 1, 1);
plot(timeVid, theta, 'LineWidth', 2);
xlabel('t (ms)');
ylabel(' \theta (°)');
title('Angle of Rod with Respect to -Y Axis');
grid on;

% Plot angular speed vs time
subplot(2, 1, 2);
plot(timeVid, omega, 'LineWidth', 2);
xlabel('t (ms)');
ylabel('Angular Speed (°/ms)');
title('Angular Speed of Rod');
grid on;


%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: C:\Users\samee\Desktop\Semester 5 part 2\Digital image processing\Project\Dataset encoder 1(in).csv
%
% Auto-generated by MATLAB on 17-Dec-2024 11:26:00

% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 10);

% Specify range and delimiter
opts.DataLines = [25, 143737];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6", "VarName7", "VarName8", "VarName9", "VarName10"];
opts.SelectedVariableNames = ["VarName7", "VarName8", "VarName9", "VarName10"];
opts.VariableTypes = ["string", "string", "string", "string", "string", "string", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Var1", "Var2", "Var3", "Var4", "Var5", "Var6"], "EmptyFieldRule", "auto");

% Import the data
Datasetencoder1in = readtable("C:\Users\samee\Desktop\Semester 5 part 2\Digital image processing\Project\Dataset encoder 1(in).csv", opts);

% Convert to output type
Datasetencoder1in = table2array(Datasetencoder1in);

% Clear temporary variables
clear opts

samples = size(Datasetencoder1in, 1); % amount of samples in the csv file

% The section above is MATLAB generated code. The code below is written by
% me. It extracts the theta and velocity values from the csv file and plots
% them on a graph

section = samples / 8; % 8 videos

% ms length of our video
% explanation in the file
timeSamples = 3947; 

time = 0:0.25:timeSamples;
thetaCsv = Datasetencoder1in(1:15789, 2);
angVeloCsv = Datasetencoder1in(1:15789, 4);

% Plot position (theta) vs time
figure;
subplot(2, 1, 1);
plot(time, thetaCsv, '-b');
title('Position (\theta) vs Time');
xlabel('t [ms]');
ylabel('\theta [°]');
grid on;

% Plot speed (n) vs time
subplot(2, 1, 2);
plot(time, angVeloCsv, '-r');
title('Speed (n) vs Time');
xlabel('t [ms]');
ylabel('n [°/ms]');
grid on;

%% Resampling the values from the csv file, synchronizing the two signal and plotting them on a graph

% Downsample the csv values with the ratio of 380/4000
thetaCsvResam = resample(thetaCsv, 380, 4000);
angVeloCsvResam = resample(angVeloCsv, 380, 4000);

% find the shift difference (xcorr not working)
maxIdxTheta = find(theta == max(theta));
maxIdxThetaResam = find(thetaCsvResam == max(thetaCsvResam));
shift = abs(maxIdxThetaResam - maxIdxTheta);

% shift theta video value shift point to the right
thetaShifted = [zeros(1, shift), theta(1:end-shift)']';  % Padding with zeros at the beginning
angVeloShifted = [zeros(1, shift), omega(1:end-shift)']';

% Plot the original and shifted signals
figure;
subplot(3, 1, 1);
plot(timeVid, theta);
title('Original theta');
xlabel('t (ms)');
ylabel('\theta (°)');

subplot(3, 1, 2);
plot(timeVid, thetaShifted);
title('Shifted theta');
xlabel('t (ms)');
ylabel('\theta (°)');

subplot(3, 1, 3);
plot(timeVid, thetaCsvResam);
hold on;
plot(timeVid, thetaShifted);
title('Aligned Signals');
xlabel('t (ms)');
ylabel('\theta (°)');
legend('Resampled theta', 'Shifted theta');
grid on;


%% Calculating the rms error between the two signals 

% Calculate position error
thetaErr = thetaCsvResam - thetaShifted;

% Calculate velocity error
angVeloErr = angVeloCsvResam - angVeloShifted;

% You can also calculate RMSE for position and velocity
rmseTheta = sqrt(mean(thetaErr.^2));
rmseAngVelo = sqrt(mean(angVeloErr.^2));

% Plot position (theta) comparison
figure;
plot(timeVid, thetaShifted, 'b', 'LineWidth', 1.5); % Video data for position (theta)
hold on;
plot(timeVid, thetaCsvResam, 'r--', 'LineWidth', 1.5); % Resampled CSV data for position (theta)
legend('Video Theta', 'Resampled CSV Theta');
xlabel('t (ms)');
ylabel('\theta (°)');
title('Position (\theta) Comparison');
grid on;

% Plot velocity (angular velocity) comparison
figure;
plot(timeVid, angVeloShifted, 'b', 'LineWidth', 1.5); % Video data for angular velocity
hold on;
plot(timeVid, angVeloCsvResam, 'r--', 'LineWidth', 1.5); % Resampled CSV data for angular velocity
legend('Video Angular Velocity', 'Resampled CSV Angular Velocity');
xlabel('t (ms)');
ylabel('Angular Velocity (°/ms)');
title('Angular Velocity Comparison');
grid on;

% Plot position error (theta)
figure;
plot(timeVid, thetaErr, 'k', 'LineWidth', 1.5); % Position error (theta)
legend('\theta Error');
xlabel('t (ms)');
ylabel('Error (°)');
title('Position (\theta) Error');
grid on;

% Plot velocity error (angular velocity)
figure;
plot(timeVid, angVeloErr, 'k', 'LineWidth', 1.5); % Velocity error (angular velocity)
legend('Angular Velocity Error');
xlabel('t (ms)');
ylabel('Error (°/s)');
title('Velocity (Angular Velocity) Error');
grid on;

% Display RMSE values in the command window
disp(['RMSE for Theta: ', num2str(rmseTheta)]);
disp(['RMSE for Angular Velocity: ', num2str(rmseAngVelo)]);


